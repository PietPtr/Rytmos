use fixed::types::{I1F15, U4F4};
use rytmos_engrave::{a, staff::Note};

use crate::commands::Command;

use super::{
    sine::{SineSynth, SineSynthSettings},
    Synth,
};

/// A sine synth with a wobbling frequency
pub struct VibratoSynth {
    address: u32,
    settings: VibratoSynthSettings,
    sine_synth: SineSynth,
    vibrato_synth: SineSynth,
    vibrato_synth_counter: usize,
    last_bend: I1F15,
}

#[derive(Debug, Clone, Copy)]
pub struct VibratoSynthSettings {
    /// Settings of the sine synth that the vibrato is applied to
    pub sine_settings: SineSynthSettings,
    /// The velocity of the sine synth used to apply the vibrato
    pub vibrato_velocity: U4F4,
    /// How much to slow down the synth that generates the vibrato sine
    pub vibrato_synth_divider: usize,
    /// The amount of bits kept of the I1F15 generated by the vibrato sine
    /// synthe before setting it as the bend parameter of the sine synth
    /// 6 is a pretty normal value. Changes vibrato amplitude exponentially!
    pub vibrato_strength: u8,
}

impl Synth for VibratoSynth {
    type Settings = VibratoSynthSettings;

    fn make(address: u32, settings: Self::Settings) -> Self {
        let mut vibrato_synth = SineSynth::make(address, SineSynthSettings::default());

        vibrato_synth.play(a!(0), settings.vibrato_velocity);

        Self {
            address,
            settings,
            sine_synth: SineSynth::make(address, settings.sine_settings),
            vibrato_synth,
            vibrato_synth_counter: 0,
            last_bend: I1F15::from_bits(0),
        }
    }

    fn configure(&mut self, settings: Self::Settings) {
        self.settings = settings
    }

    fn play(&mut self, note: Note, velocity: U4F4) {
        self.sine_synth.play(note, velocity);
    }

    fn next(&mut self) -> I1F15 {
        self.vibrato_synth_counter += 1;
        if self.vibrato_synth_counter == self.settings.vibrato_synth_divider {
            self.last_bend = self.vibrato_synth.next();
            self.vibrato_synth_counter = 0;
        }

        self.sine_synth.bend = self.last_bend >> (16 - self.settings.vibrato_strength);

        self.sine_synth.next()
    }

    fn run_command(&mut self, command: Command) {
        super::run_play_command(self, command);
    }

    fn address(&self) -> u32 {
        self.address
    }

    fn freq(&mut self, freq: fixed::types::U12F4) {
        todo!()
    }

    fn attack(&mut self, attack: U4F4) {
        todo!()
    }
}
